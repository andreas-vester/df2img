[project]
name = "df2img"
version = "0.2.18"
description = "Save a Pandas DataFrame as image"
authors = [
    {name = "Andreas Vester", email = "info@df2img.dev"},
]
requires-python = ">=3.9"
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["pandas", "dataframe", "image"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    "kaleido==0.0.3; platform_system=='Linux'",
    "kaleido==0.1.0post1; platform_system!='Linux'",
    "pandas>=1.0.0,<3.0.0",
    "plotly>=5.0.0,<6.0.0",
    "ipython>=8.0.0",
    "nbformat>=5.0.0",
]

[project.optional-dependencies]
docs = [
    "mkdocs-jupyter>=0.24.6",
    "mkdocs-material>=9.5.13",
    "mkdocstrings[python]>=0.24.1",
]

lint = [
    "black[jupyter]>=24.0.0",
    "esbonio>=0.16.4",
    "mypy>=1.0.0",
    "pre-commit>=3.6.2",
    "python-kacl>=0.4.6",
    "ruff>=0.3.2",
]

test = [
    "nox>=2024.3.2",
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "coverage[toml]>=7.4.3",
]

[project.urls]
BugTracker = "https://github.com/andreas-vester/df2img/issues?q=label%3Abug+"
homepage = "https://df2img.dev"
repository = "https://github.com/andreas-vester/df2img"
documentation = "https://df2img.dev"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["df2img", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.ruff]
# Exclude a variety of commonly ignored directiories
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".nox",
    "pants.d",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "_build",
    "dist",
    "site",
]

# Same as Black
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[lint]
select = [
    "F",        # Pyflakes
    "E", "W",   # Pycodestyle
    "I",        # isort
    "N",        # pep8-naming
    "D",        # docstring
    "UP",       # pyupgrade
    "ANN",      # flake8-annotations
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "C40",      # flake8-comprehensions
    "ARG",      # flake8-unused-arguments
    "PTH",      # flake8-use-pathlib
    "ERA",      # flake8-eradicate
    "SIM",      # flake8-simplify
]
ignore = []

# Allow autofix for all enabled rules (when '--fix') is provided.
fixable = ["ALL"]
unfixable = []

mccabe = ["max-complexity = 10"]

pydocstyle = ["convention = 'numpy'"]  # Accepts: "google", "numpy", or "pep257"

per-file-ignores = ["'__init__.py' = ['D104']"]

[tool.black]
target-version = ["py312"]
include ='\.pyi?$'
force-exclude = ".venv, .nox, docs"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = """\
    --cov df2img \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
    --strict-markers
    --doctest-modules
"""
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL NUMBER"

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
check_untyped_defs = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
follow_imports = "skip"

[tool.pdm.build]
includes = ["CHANGELOG.md", "LICENSE", "CONTRIBUTING.md", "CODE_OF_CONDUCT.md"]

[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"
