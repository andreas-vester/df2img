[tool.poetry]
name = "df2img"
version = "0.2.11"
description = "Save a Pandas DataFrame as image"
license = "MIT"
authors = ["Andreas Vester <info@df2img.dev>"]
readme = "README.md"
homepage = "https://df2img.dev"
repository = "https://github.com/andreas-vester/df2img"
documentation = "https://df2img.dev"
keywords = ["pandas", "dataframe", "image"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
include = [
    "CHANGELOG.md",
    "LICENSE",
    "CONTRIBUTING.md",
    "CODE_OF_CONDUCT.md",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/andreas-vester/df2img/issues?q=label%3Abug+"

[tool.poetry.dependencies]
python = "^3.8"
kaleido = "0.2.1"
pandas = "^2.0.0"
plotly = "^5.3.1"

[tool.poetry.group.dev.dependencies]
black = "^23.0.0"
esbonio = "^0.13.0"
mypy = "^1.0.0"
pre-commit = "^2.19.0"
python-kacl = "^0.3.4"
ruff = "^0.0.259"

[tool.poetry.group.test.dependencies]
nox = "^2022.8.7"
pytest = "^7.1.2"
pytest-cov = "^4.0.0"
coverage = {extras = ["toml"], version = "^6.4.4"}
ipykernel = "^6.6.0"
nbformat = "^5.1.3"

[tool.poetry.group.docs.dependencies]
mkdocstrings = {extras = ["python"], version = "^0.19.0"}
mkdocs-jupyter = "^0.22.0"
mkdocs-material = "^8.5.3"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["df2img", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.ruff]
select = [
    "F",        # Pyflakes
    "E", "W",   # Pycodestyle
    "I",        # isort
    "N",        # pep8-naming
    "D",        # docstring
    "UP",       # pyupgrade
    "ANN",      # flake8-annotations
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "C40",      # flake8-comprehensions
    "ARG",      # flake8-unused-arguments
    "PTH",      # flake8-use-pathlib
    "ERA",      # flake8-eradicate
    "SIM",      # flake8-simplify
]

# Allow autofix for all enabled rules (when '--fix') is provided.
fixable = [
    "F",        # Pyflakes
    "E", "W",   # Pycodestyle
    "I",        # isort
    "N",        # pep8-naming
    "D",        # docstring
    "UP",       # pyupgrade
    "ANN",      # flake8-annotations
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "C40",      # flake8-comprehensions
    "ARG",      # flake8-unused-arguments
    "PTH",      # flake8-use-pathlib
    "ERA",      # flake8-eradicate
    "SIM",      # flake8-simplify
]

unfixable = []

# Exclude a variety of commonly ignored directiories
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".nox",
    "pants.d",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "_build",
    "dist",
    "site",
]

# Same as Black
line-length = 88

target-version = "py311"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "numpy"  # Accepts: "google", "numpy", or "pep257"

[tool.black]
target-version = ["py311"]
include ='\.pyi?$'
force-exclude = ".venv, .nox, docs"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = """\
    --cov df2img \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
    --strict-markers
    --doctest-modules
"""
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL NUMBER"

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
check_untyped_defs = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
follow_imports = "skip"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
