{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"df2img: Save a Pandas DataFrame as image","text":""},{"location":"#what-is-it-all-about","title":"What is it all about?","text":"<p>Have you ever tried to save a <code>pd.DataFrame</code> into an image file? This is not a straightforward process at all. Unfortunately, <code>pandas</code> itself doesn't provide this functionality out of the box.</p> <p>df2img (dataframe-to-image) tries to fill the gap. It is a Python library that greatly simplifies the process of saving a <code>pd.DataFrame</code> into an image file (e.g. <code>png</code> or <code>jpg</code>).</p> <p>It is a wrapper/convenience function in order to create a <code>plotly</code> Table. That is, one can use <code>plotly</code>'s styling function to format the table.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<p>df2img has a limited number of dependencies, namely</p> <ul> <li><code>pandas</code></li> <li><code>plotly</code></li> <li><code>kaleido</code></li> </ul>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Installation</li> <li>Getting started</li> <li>Controlling the index column</li> <li>Formatting</li> <li>API Reference</li> <li>Contributing</li> <li>Code of conduct</li> <li>Changelog</li> </ul>"},{"location":"#contributing-to-df2img","title":"Contributing to df2img","text":"<p>If you consider to contribute to df2img, please read the Contributing to df2img section in the documentation. This document is supposed to guide you through the whole process.</p>"},{"location":"api_reference/","title":"API Reference","text":"<p>Collection of functions to plot and save a <code>pd.DataFrame</code>.</p>"},{"location":"api_reference/#df2img.plot_dataframe","title":"plot_dataframe","text":"<pre><code>plot_dataframe(\n    df,\n    print_index=True,\n    title=None,\n    tbl_header_visible=True,\n    tbl_header=None,\n    tbl_cells=None,\n    row_fill_color=None,\n    col_width=None,\n    fig_size=None,\n    show_fig=True,\n    plotly_renderer=\"png\",\n    **layout_kwargs\n)\n</code></pre> <p>Plot a pd.Series or pd.DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pd.Series | pd.DataFrame</code> <p>Series or dataframe to be plotted.</p> required <code>print_index</code> <code>bool</code> <p>If <code>True</code>, prints the dataframe's index. <code>df.index.name</code> will become the index column header.</p> <code>True</code> <code>title</code> <code>dict | None</code> <p>A dict possibly containing <code>plotly</code> key/value pairs:</p> <p>https://plotly.com/python/reference/layout/#layout-title</p> <p>More relevant key/value pairs:</p> <ul> <li>font_color : color</li> <li>font_family : str</li> <li>font_size : number greater than or equal to 1</li> <li>text : str</li> <li>x : number between or equal to 0 and 1, default 0.5</li> </ul> <p>Sets the x position with respect to <code>xref</code> in normalized coordinates from   \"0\" (left) to \"1\" (right).</p> <ul> <li>xanchor : enumerated, one of (\"auto\", \"left\", \"center\", \"right\"),   default \"auto\"</li> </ul> <p>Sets the title's horizontal alignment with respect to its x position.   \"left\" means that the title starts at x, \"right\" means that the title ends   at x and \"center\" means that the title's center is at x. \"auto\" divides   <code>xref</code> by three and calculates the <code>xanchor</code> value automatically based on   the value of <code>x</code>.</p> <code>None</code> <code>tbl_header_visible</code> <code>bool</code> <p>If <code>False</code>, table header will be invisible. Takes precedence over <code>tbl_header</code> argument.</p> <code>True</code> <code>tbl_header</code> <code>dict | None</code> <p>A dict possibly containing <code>plotly</code> key/value pairs:</p> <p>https://plotly.com/python/reference/table/#table-header</p> <p>https://plotly.com/python/reference/table/#table-cells</p> <p>More relevant key/value pairs:</p> <ul> <li>align : enumerated or array of enumerateds,   one of (\"left\", \"center\", \"right\"), default \"center\"</li> <li>fill_color : color, default \"white\"</li> <li>font_color : color or array of colors</li> <li>font_family : str or array of str</li> <li>font_size : number or array of numbers greater than or equal to 1</li> <li>height : number, default 28</li> <li>line_width : number or array of numbers, default 1</li> </ul> <code>None</code> <code>tbl_cells</code> <code>dict | None</code> <p>A dict possibly containing <code>plotly</code> key/value pairs:</p> <p>https://plotly.com/python/reference/table/#table-header</p> <p>https://plotly.com/python/reference/table/#table-cells</p> <p>More relevant key/value pairs:</p> <ul> <li>align : enumerated or array of enumerateds,   one of (\"left\", \"center\", \"right\"), default \"center\"</li> <li>fill_color : color, default \"white\"</li> <li>font_color : color or array of colors</li> <li>font_family : str or array of str</li> <li>font_size : number or array of numbers greater than or equal to 1</li> <li>height : number, default 28</li> <li>line_width : number or array of numbers, default 1</li> </ul> <code>None</code> <code>row_fill_color</code> <code>tuple[str, str] | None</code> <p>Tuple of colors that will be used to alternate row colors. Takes precedence over <code>tbl_cells[\"fill_color\"]</code>.</p> <code>None</code> <code>col_width</code> <code>int | float | list[int | float] | None</code> <p>The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.</p> <code>None</code> <code>fig_size</code> <code>tuple[int, int] | None</code> <p>Tuple specifying the <code>width</code> and <code>height</code> of the figure.</p> <code>None</code> <code>show_fig</code> <code>bool</code> <p>If True, plot will be displayed.</p> <code>True</code> <code>plotly_renderer</code> <code>str</code> <p>Option to specify how and where to display the figure. See https://plotly.com/python/renderers/ for further information.</p> <code>'png'</code> <code>**layout_kwargs</code> <code>Any</code> <p>Plotly accepts a large number of layout-related keyword arguments. A detailed descriptions is available at https://plotly.com/python-api-reference/generated/plotly.graph_objects.Layout.html.</p> <code>{}</code> <p>Returns:</p> Type Description <code>plotly.graph_objects.Figure</code> <p>Returns a figure object.</p>"},{"location":"api_reference/#df2img.save_dataframe","title":"save_dataframe","text":"<pre><code>save_dataframe(fig, filename)\n</code></pre> <p>Write <code>plotly</code> figure to disk.</p> <p>Parameters:</p> Name Type Description Default <code>fig</code> <code>plotly.graph_objects.Figure</code> <p>Figure object to save.</p> required <code>filename</code> <code>Path</code> <p>Filename including path where to save figure.</p> required <p>Returns:</p> Type Description <code>None</code>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#0214-2023-11-08","title":"0.2.14 - 2023-11-08","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Issue with kaleido</li> </ul>"},{"location":"changelog/#0213-2023-11-06","title":"0.2.13 - 2023-11-06","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Python 3.8 no longer supported.</li> <li>Updated dependencies.</li> </ul>"},{"location":"changelog/#0212-2023-08-07","title":"0.2.12 - 2023-08-07","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Replaced <code>poetry</code> with <code>pdm</code>.</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Issue with <code>kaleido</code> when using Windows that leads to a crash when using <code>df2img.save_dataframe</code> (GH issue #58).</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Updated dependencies.</li> </ul>"},{"location":"changelog/#0211-2023-05-16","title":"0.2.11 - 2023-05-16","text":""},{"location":"changelog/#security_1","title":"Security","text":"<ul> <li>Updated dependencies.</li> </ul>"},{"location":"changelog/#0210-2023-04-05","title":"0.2.10 - 2023-04-05","text":""},{"location":"changelog/#improved","title":"Improved","text":"<ul> <li>Transitioned from flake8 to ruff.</li> </ul>"},{"location":"changelog/#security_2","title":"Security","text":"<ul> <li>Updated dependencies.</li> </ul>"},{"location":"changelog/#029-2023-01-03","title":"0.2.9 - 2023-01-03","text":""},{"location":"changelog/#security_3","title":"Security","text":"<ul> <li>Updated dependencies.</li> </ul>"},{"location":"changelog/#028-2022-11-01","title":"0.2.8 - 2022-11-01","text":""},{"location":"changelog/#improved_1","title":"Improved","text":"<ul> <li>Introduce Contributing section and Code of conduct to documentation.</li> <li>Using nox for testing:<ul> <li>Unit testing using pytest</li> <li>Added pytest coverage report.</li> <li>Linting using flake8.</li> <li>Formatting using black.</li> <li>Type checking using mypy</li> </ul> </li> <li>Increased test coverage to 100%.</li> <li>Use python-kacl to maintain CHANGELOG.md.</li> </ul>"},{"location":"changelog/#027-2022-08-03","title":"0.2.7 - 2022-08-03","text":""},{"location":"changelog/#security_4","title":"Security","text":"<ul> <li>Bumps mistune from 0.8.4 to 2.0.3.</li> <li>Release notes</li> <li>Changelog</li> <li>Commits</li> </ul> <p>updated-dependencies:   - dependency-name: mistune     dependency-type: indirect</p>"},{"location":"changelog/#026-2022-08-03","title":"0.2.6 - 2022-08-03","text":""},{"location":"changelog/#improved_2","title":"Improved","text":"<ul> <li>Bumped direct dependencies</li> <li> <p>Bumps pandas from 1.4.2 to 1.4.3.</p> <ul> <li>Release notes</li> <li>Commits</li> </ul> <p>updated-dependencies: - dependency-name: pandas   dependency-type: direct</p> </li> <li> <p>Bumps plotly from 5.8.0 to 5.9.0.</p> <ul> <li>Release notes</li> <li>Commits</li> </ul> <p>updated-dependencies: - dependency-name: plotly   dependency-type: direct - Bumps various indirect dependencies to latest versions.</p> </li> </ul>"},{"location":"changelog/#025-2022-06-02","title":"0.2.5 - 2022-06-02","text":""},{"location":"changelog/#improved_3","title":"Improved","text":"<ul> <li>Integrated <code>pre-commit</code> with the following hooks:</li> <li>id: trailing-whitespace</li> <li>id: end-of-file-fixer</li> <li>id: check-yaml</li> <li>id: check-added-large-files</li> <li>id: black</li> <li>id: flake8</li> <li>id: isort</li> <li>Updated dependencies (tested with pandas v1.4.2 and plotly v5.8.0).</li> </ul>"},{"location":"changelog/#024-2022-01-22","title":"0.2.4 - 2022-01-22","text":""},{"location":"changelog/#improved_4","title":"Improved","text":"<ul> <li>Updated extra dependencies.</li> </ul>"},{"location":"changelog/#023-2022-01-04","title":"0.2.3 - 2022-01-04","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Input argument <code>**layout_kwargs</code> added to <code>plot_dataframe</code> function.   This allows the user to make use of <code>plotly</code>'s vast layout settings via passing through <code>plotly</code> related keyword arguments.   Further information can be found at https://plotly.com/python-api-reference/generated/plotly.graph_objects.Layout.html.</li> </ul>"},{"location":"changelog/#022-2021-11-28","title":"0.2.2 - 2021-11-28","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Input argument <code>plotly_renderer</code> added in order to select the appropriate renderer. For more information about <code>plotly</code>'s renderers, visit the respective website at https://plotly.com/python/renderers/.</li> <li>Extensive documentation now available at https://df2img.dev.</li> </ul>"},{"location":"changelog/#021-2021-11-13","title":"0.2.1 - 2021-11-13","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Possibility to hide the header row.   Added input argument <code>tbl_header_visible</code> to the <code>plot_dataframe</code> function, which controls the behavior. If set to <code>False</code>, the table header will be invisible. <code>tbl_header_visible</code> takes precedence over <code>tbl_header</code> input argument. That is, if you set it to <code>False</code>, it doesn't matter whether you provide the <code>tbl_header</code> argument.</li> </ul>"},{"location":"changelog/#020-2021-10-26","title":"0.2.0 - 2021-10-26","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Possibility to set alignment for individual columns   (GH #2).</li> <li>Possibility to set relative column widths (GH #3).</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>BREAKING CHANGES: Changed the backend from <code>matplotlib</code> to <code>plotly</code>. As a result, function names and signature completely changed.</li> <li>Possibility to set various title formats/styles.</li> <li>Possibility to set various table header row formats/styles.</li> <li>Possibility to set various table cell formats/styles.</li> <li>Possibility to set figure size.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Function <code>df2img</code>.   Has been replaced with <code>plot_dataframe</code> and <code>save_dataframe</code>.</li> </ul>"},{"location":"changelog/#011-2021-10-02","title":"0.1.1 - 2021-10-02","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Input arguments <code>col_width</code>, <code>row_height</code>, and <code>font_size</code> now accept <code>int</code> (GH issue #1).</li> </ul>"},{"location":"changelog/#010-2021-09-17","title":"0.1.0 - 2021-09-17","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Possibility to save <code>pd.DataFrame</code> into image file (e.g. png or jpg).</li> <li>Possibility to add title to the image.</li> <li>Possibility to define the number of header rows and header columns.</li> <li>Possibility to change colors for header rows.</li> <li>Possibility to alternate row colors for better readability.</li> <li>Possibility to change column width and row height.</li> <li>Possibility to change font size.</li> </ul>"},{"location":"code_of_conduct/","title":"Code of Conduct - df2img","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at info@df2img.dev. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4 and 2.0, and was generated by contributing-gen.</p>"},{"location":"contributing/","title":"Contributing to df2img","text":"<p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p> <p>All types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89</p> <p>And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about: - Star the project - Tweet about it - Refer this project in your project's README - Mention the project at local meetups and tell your friends/colleagues</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>I Have a Question</li> <li>I Want To Contribute<ul> <li>Reporting Bugs</li> <li>Suggesting Enhancements</li> <li>Your First Code Contribution</li> <li>Improving The Documentation</li> </ul> </li> <li>Style guides<ul> <li>Code formatting</li> <li>Linting</li> <li>Commit Messages</li> </ul> </li> <li>Attribution</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by the df2img Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to info@df2img.dev.</p>"},{"location":"contributing/#i-have-a-question","title":"I Have a Question","text":"<p>If you want to ask a question, we assume that you have read the available Documentation.</p> <p>Before you ask a question, it is best to search for existing issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue.</p> <p>If you then still feel the need to ask a question and need clarification, we recommend the following:</p> <ul> <li>Open a new issue.</li> <li>Provide as much context as you can about what you're running into.</li> <li>Provide project and platform versions (Python version etc.), depending on what seems   relevant.</li> <li>Attach the \"question\" label to your newly created issue.</li> </ul> <p>We will then take care of the issue as soon as possible.</p>"},{"location":"contributing/#i-want-to-contribute","title":"I Want To Contribute","text":""},{"location":"contributing/#legal-notice","title":"Legal Notice","text":"<p>When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.</p>"},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":""},{"location":"contributing/#before-submitting-a-bug-report","title":"Before Submitting a Bug Report","text":"<p>A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.</p> <ul> <li>Make sure that you are using the latest version.</li> <li>Determine if your bug is really a bug and not an error on your side e.g. using   incompatible environment components/versions (Make sure that you have read the   documentation. If you are looking for support, you might want to check   this section).</li> <li>To see if other users have experienced (and potentially already solved) the same   issue you are having, check if there is not already a bug report existing for your   bug or error in the bug tracker.</li> <li>Collect information about the bug:</li> <li>Stack trace (Traceback).</li> <li>OS, Platform and Version (Windows, Linux, macOS, x86, ARM).</li> <li>Version of the interpreter, compiler, SDK, runtime environment, package manager,     depending on what seems relevant.</li> <li>Possibly your input and the output.</li> <li>Can you reliably reproduce the issue? And can you also reproduce it with older     versions?</li> </ul>"},{"location":"contributing/#how-do-i-submit-a-good-bug-report","title":"How Do I Submit a Good Bug Report?","text":"<p>You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead, sensitive bugs must be sent by email to info@df2img.dev.</p> <p>We use GitHub issues to track bugs and errors. If you run into an issue with the project:</p> <ul> <li>Open an issue. (Since we can't be   sure at this point whether it is a bug or not, we ask you not to talk about a bug   yet and not to label the issue.)</li> <li>Explain the behavior you would expect and the actual behavior.</li> <li>Please provide as much context as possible and describe the reproduction steps   that someone else can follow to recreate the issue on their own. This usually   includes your code. For good bug reports you should isolate the problem and create   a reduced test case.</li> <li>Provide the information you collected in the previous section.</li> </ul> <p>Once it's filed:</p> <ul> <li>The project team will label the issue accordingly.</li> <li>A team member will try to reproduce the issue with your provided steps. If there   are no reproduction steps or no obvious way to reproduce the issue, the team will   ask you for those steps and mark the issue as <code>needs-repro</code>. Bugs with the   <code>needs-repro</code> tag will not be addressed until they are reproduced.</li> <li>If the team is able to reproduce the issue, it will be marked <code>needs-fix</code>, as well   as possibly other tags (such as <code>critical</code>), and the issue will be left to be   implemented by someone.</li> </ul>"},{"location":"contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>This section guides you through submitting an enhancement suggestion for df2img, including completely new features and minor improvements to existing functionality. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.</p>"},{"location":"contributing/#before-submitting-an-enhancement","title":"Before Submitting an Enhancement","text":"<ul> <li>Make sure that you are using the latest version.</li> <li>Read the documentation carefully and find out   if the functionality is already covered.</li> <li>Perform a search to see if the   enhancement has already been suggested. If it has, add a comment to the existing   issue instead of opening a new one.</li> <li>Find out whether your idea fits with the scope and aims of the project. It's up to   you to make a strong case to convince the project's developers of the merits of   this feature.</li> </ul>"},{"location":"contributing/#how-do-i-submit-a-good-enhancement-suggestion","title":"How Do I Submit a Good Enhancement Suggestion?","text":"<p>Enhancement suggestions are tracked as GitHub issues.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Use feat: as a prefix, e.g. \"feat: Add awesome enhancement\".</li> <li>Provide a step-by-step description of the suggested enhancement in as many   details as possible.</li> <li>Describe the current behavior and explain which behavior you expected to see   instead and why. At this point you can also tell which alternatives do not work   for you.</li> <li>You may want to include screenshots and animated GIFs which help you   demonstrate the steps or point out the part which the suggestion is related to.</li> <li>Explain why this enhancement would be useful to most df2img users. You may   also want to point out other projects that solved it better and which could serve   as inspiration.</li> </ul>"},{"location":"contributing/#your-first-code-contribution","title":"Your First Code Contribution","text":"<p>You can find a good introduction on how to contribute to an open source project. In a nutshell, the process involves the following steps:</p> <ol> <li>Fork (i.e. copy) the repository to your own GitHub account.</li> <li>Clone the fork to your local machine.</li> <li>Create a new branch to work on.</li> <li>Commit and push your changes to your own GitHub.</li> <li>Create the Pull Request.</li> </ol>"},{"location":"contributing/#how-do-i-set-up-my-dev-environment","title":"How do I set up my dev environment?","text":"<p>df2img uses pdm to manage its dependencies. So make sure you have it properly installed before you go on. To set up your development environment, you should install the project after you cloned the repo to your local machine:</p> <pre><code>pdm install -d\n</code></pre> <p>The df2img package adheres to a bunch of Style guides, that will be enforced with the help of Pre-commit.</p>"},{"location":"contributing/#further-dev-setup-and-what-i-need-to-now-about-pre-commit","title":"Further dev setup and what I need to now about \"pre-commit\"","text":"<p>Before you commit your code changes, you should make sure, that you only commit code that is of good quality and adheres to the projects Style guides. <code>pre-commit</code> hooks run all the auto-formatters, linters, and other quality checks to make sure the changeset is in good shape before a commit/push happens. If it finds any issues with your code, <code>pre-commit</code> will prevent the actual commit. You then have the chance to fix all issues and re-commit your code changes.</p> <p>In concrete, besides <code>pre-commit</code>'s native checks, the following hooks have been implemented (in alphabetical order):</p> <ul> <li>black: The Uncompromising Code Formatter</li> <li> <p>ruff: An extremely fast Python linter, written in Rust, with the following options   enabled:</p> <ul> <li>Pyflakes</li> <li>Pycodestyle</li> <li>isort</li> <li>pep8-naming</li> <li>docstring</li> <li>pyupgrade</li> <li>flake8-annotations</li> <li>flake8-bugbear</li> <li>flake8-builtins</li> <li>flake8-comprehensions</li> <li>flake8-unused-arguments</li> <li>flake8-use-pathlib</li> <li>flake8-eradicate</li> <li>flake8-simplify</li> </ul> </li> </ul> <p>You can install the hooks with (runs for each commit):</p> <pre><code>pre-commit install\n</code></pre> <p>Or if you want them to run only for each push:</p> <pre><code>pre-commit install -t pre-push\n</code></pre> <p>Or if you want to run all checks manually for all files:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"contributing/#how-do-i-execute-unit-tests","title":"How do I execute unit tests?","text":"<p>Running simple unit tests using <code>pytest</code> is as easy as</p> <pre><code>pdm run pytest\n</code></pre> <p>In addition, you can perform more rigorous linting and tests against multiple Python versions. In this case, the test result depends on the Python versions available on your machine. Make sure, you've got at least Python 3.8 installed on your machine. Then simply run:</p> <pre><code>pdm run nox\n</code></pre> <p>If all tests pass, you should get a result comparable to this:</p> <pre><code>nox &gt; Ran multiple sessions:\nnox &gt; * pre-commit: success\nnox &gt; * tests-3.8: success\nnox &gt; * tests-3.9: success\nnox &gt; * tests-3.10: success\nnox &gt; * tests-3.11: success\n</code></pre>"},{"location":"contributing/#improving-the-documentation","title":"Improving The Documentation","text":"<p>The documentation is completely written in Markdown. Utilizing the mkdocs and mkdocstrings libraries, the content will be generated automatically from the docs directory and from the docstrings of the public signatures of the source code.</p> <p>There is always room for improvement. So, if you feel something isn't as clear described as it should be, please don't hesitate to open an issue. Also, please attach the documentation label to it in order to make the maintainers' life a bit easier.</p>"},{"location":"contributing/#style-guides","title":"Style guides","text":""},{"location":"contributing/#code-formatting","title":"Code formatting","text":"<p>This project uses the black formatter to automatically format the code basis. The line length has been set to 88 characters.</p>"},{"location":"contributing/#linting","title":"Linting","text":"<p>We use ruff as our tool of choice for style guide enforcement. That means, contributors should adhere to the following points (not exhaustive):</p> <ul> <li>Every module must have a docstring to describe what the module is all about.</li> <li>Every function signature should have type hints as well as return values.</li> <li>Every function must have a docstring in   numpy format.</li> </ul>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>This project follows the Conventional Commits specification. This will help us to automatically generate the CHANGELOG.</p>"},{"location":"contributing/#attribution","title":"Attribution","text":"<p>This guide is based on the contributing-gen. Make your own!</p>"},{"location":"control_index/","title":"Controlling the index column","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nimport df2img\n\ndf = pd.DataFrame(\n    data=dict(\n        value_col_1=[1.4, float(\"NaN\"), 250, 24.65],\n        str_col=(\"string1\", \"string2\", float(\"NaN\"), \"string4\"),\n    ),\n    index=[\"row1\", \"row2\", \"row3\", \"row4\"],\n)\n\ndf\n</pre> import pandas as pd  import df2img  df = pd.DataFrame(     data=dict(         value_col_1=[1.4, float(\"NaN\"), 250, 24.65],         str_col=(\"string1\", \"string2\", float(\"NaN\"), \"string4\"),     ),     index=[\"row1\", \"row2\", \"row3\", \"row4\"], )  df Out[1]: value_col_1 str_col row1 1.40 string1 row2 NaN string2 row3 250.00 NaN row4 24.65 string4 <p>Setting the index name at the dataframe level:</p> In\u00a0[2]: Copied! <pre>df.index.name = \"row_number\"\ndf\n</pre> df.index.name = \"row_number\" df Out[2]: value_col_1 str_col row_number row1 1.40 string1 row2 NaN string2 row3 250.00 NaN row4 24.65 string4 In\u00a0[3]: Copied! <pre>fig = df2img.plot_dataframe(\n    df,\n    title=dict(text=\"Table with index header\"),\n    fig_size=(600, 140)\n)\n</pre> fig = df2img.plot_dataframe(     df,     title=dict(text=\"Table with index header\"),     fig_size=(600, 140) ) In\u00a0[4]: Copied! <pre>fig = df2img.plot_dataframe(\n    df,\n    print_index=False,\n    title=dict(text=\"Table without index column\"),\n    fig_size=(600, 140)\n)\n</pre> fig = df2img.plot_dataframe(     df,     print_index=False,     title=dict(text=\"Table without index column\"),     fig_size=(600, 140) )"},{"location":"control_index/#controlling-the-index-column","title":"Controlling the index column\u00b6","text":"<p>df2img provides some possibilites to control how the index column will be printed/saved to an image file.</p> <p>First thing to mention is the fact that the index column header cell is dependent on the index name of the dataframe. If you want to omit a header for the index column, you have to set the index name of the dataframe to an empty string: <code>df.index.name = \"\"</code>.</p>"},{"location":"control_index/#index-header-cell","title":"Index header cell\u00b6","text":""},{"location":"control_index/#omitting-the-index-column","title":"Omitting the index column\u00b6","text":"<p>df2img provides the keyword argument <code>print_index</code>, which, if set to <code>True</code>, prints the index column. If it is set to <code>False</code>, the dataframe's index column will simply be ignored/not printed at all.</p>"},{"location":"formatting/","title":"Formatting","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nimport df2img\n\n\ndf = pd.DataFrame(\n    data=dict(\n        float_col=[1.4, float(\"NaN\"), 250, 24.65],\n        str_col=(\"string1\", \"string2\", float(\"NaN\"), \"string4\"),\n    ),\n    index=[\"row1\", \"row2\", \"row3\", \"row4\"],\n)\n\ndf\n</pre> import pandas as pd  import df2img   df = pd.DataFrame(     data=dict(         float_col=[1.4, float(\"NaN\"), 250, 24.65],         str_col=(\"string1\", \"string2\", float(\"NaN\"), \"string4\"),     ),     index=[\"row1\", \"row2\", \"row3\", \"row4\"], )  df Out[1]: float_col str_col row1 1.40 string1 row2 NaN string2 row3 250.00 NaN row4 24.65 string4 In\u00a0[2]: Copied! <pre>fig=df2img.plot_dataframe(\n    df,\n    title=dict(\n        text=\"This is a title starting at the x-value x=0.1\",\n        font_color=\"darkred\",\n        font_size=20,\n        font_family=\"Times New Roman\",\n        x=0.1,\n        xanchor=\"left\",\n    ),\n    fig_size=(600, 140),\n)\n</pre> fig=df2img.plot_dataframe(     df,     title=dict(         text=\"This is a title starting at the x-value x=0.1\",         font_color=\"darkred\",         font_size=20,         font_family=\"Times New Roman\",         x=0.1,         xanchor=\"left\",     ),     fig_size=(600, 140), ) In\u00a0[3]: Copied! <pre>fig=df2img.plot_dataframe(\n    df,\n    tbl_header_visible=True,  # default value\n    fig_size=(600, 140)\n)\n</pre> fig=df2img.plot_dataframe(     df,     tbl_header_visible=True,  # default value     fig_size=(600, 140) ) In\u00a0[4]: Copied! <pre>fig=df2img.plot_dataframe(\n    df,\n    tbl_header_visible=False,\n    fig_size=(600, 140)\n)\n</pre> fig=df2img.plot_dataframe(     df,     tbl_header_visible=False,     fig_size=(600, 140) ) In\u00a0[5]: Copied! <pre>fig = df2img.plot_dataframe(\n    df,\n    tbl_header=dict(\n        align=\"left\",\n        fill_color=\"blue\",\n        font_color=\"white\",\n        font_size=14,\n    ),\n    fig_size=(600, 140),\n)\n</pre> fig = df2img.plot_dataframe(     df,     tbl_header=dict(         align=\"left\",         fill_color=\"blue\",         font_color=\"white\",         font_size=14,     ),     fig_size=(600, 140), ) In\u00a0[6]: Copied! <pre>fig = df2img.plot_dataframe(\n    df,\n    tbl_cells=dict(\n        align=\"right\",\n        fill_color=\"green\",\n        font_color=\"yellow\",\n    ),\n    fig_size=(600, 140),\n)\n</pre> fig = df2img.plot_dataframe(     df,     tbl_cells=dict(         align=\"right\",         fill_color=\"green\",         font_color=\"yellow\",     ),     fig_size=(600, 140), ) <p>You can vary the row height or the line width. Let's increase both to see the difference.</p> In\u00a0[7]: Copied! <pre>fig = df2img.plot_dataframe(\n    df,\n    tbl_header=dict(\n        height=50,\n        line_width=3,\n    ),\n    tbl_cells=dict(\n        align=\"right\",\n        fill_color=\"green\",\n        font_color=\"yellow\",\n        height=40,\n        line_width=3,\n    ),\n    fig_size=(600, 140),\n)\n</pre> fig = df2img.plot_dataframe(     df,     tbl_header=dict(         height=50,         line_width=3,     ),     tbl_cells=dict(         align=\"right\",         fill_color=\"green\",         font_color=\"yellow\",         height=40,         line_width=3,     ),     fig_size=(600, 140), )  In\u00a0[8]: Copied! <pre>fig = df2img.plot_dataframe(\n    df,\n    row_fill_color=(\"#ffffff\", \"#d7d8d6\"),\n    fig_size=(600, 140),\n)\n</pre> fig = df2img.plot_dataframe(     df,     row_fill_color=(\"#ffffff\", \"#d7d8d6\"),     fig_size=(600, 140), )  In\u00a0[9]: Copied! <pre>fig = df2img.plot_dataframe(\n    df,\n    col_width=[3, 2, 1],\n    fig_size=(600, 140),\n)\n</pre> fig = df2img.plot_dataframe(     df,     col_width=[3, 2, 1],     fig_size=(600, 140), )  <p>Now, what about if the second column should be double as wide as the other columns? - Just specify <code>col_width=[0.5, 1, 0.5]</code>. The absolute numbers don't have any meaning. Important is simply the proportion to each other. Specifying <code>col_width=[100, 200, 100]</code> would lead to the exact same result.</p> In\u00a0[10]: Copied! <pre>fig = df2img.plot_dataframe(\n    df,\n    col_width=[0.5, 1, 0.5],\n    fig_size=(600, 140),\n)\n</pre> fig = df2img.plot_dataframe(     df,     col_width=[0.5, 1, 0.5],     fig_size=(600, 140), )  In\u00a0[11]: Copied! <pre>fig = df2img.plot_dataframe(df, fig_size=(300, 75))\n</pre> fig = df2img.plot_dataframe(df, fig_size=(300, 75)) In\u00a0[12]: Copied! <pre>fig = df2img.plot_dataframe(df, fig_size=(500, 150))\n</pre> fig = df2img.plot_dataframe(df, fig_size=(500, 150)) In\u00a0[13]: Copied! <pre>fig = df2img.plot_dataframe(df, fig_size=(700, 200))\n</pre> fig = df2img.plot_dataframe(df, fig_size=(700, 200)) In\u00a0[14]: Copied! <pre>fig = df2img.plot_dataframe(df, fig_size=(600, 140), paper_bgcolor=\"yellow\")\n</pre> fig = df2img.plot_dataframe(df, fig_size=(600, 140), paper_bgcolor=\"yellow\") <p>You can also pass rgba color values. If you want to make the background transparent, pass <code>rgba(0, 0, 0, 0)</code>.</p> In\u00a0[15]: Copied! <pre>fig = df2img.plot_dataframe(df, fig_size=(600, 140), paper_bgcolor=\"rgba(0, 0, 0, 0)\")\n</pre> fig = df2img.plot_dataframe(df, fig_size=(600, 140), paper_bgcolor=\"rgba(0, 0, 0, 0)\")"},{"location":"formatting/#formatting","title":"Formatting\u00b6","text":"<p>df2img uses the plotly library in the background in order to create tables. That means, you can take advantage of all the formatting capabilities provided by plotly.</p> <p>The most important things with respect to the layout of a table can be controlled via input arguments to df2img's <code>plot_dataframe()</code> function.</p> <ul> <li>Title<ul> <li>Title text</li> <li>Font color</li> <li>Font size</li> <li>Font family</li> <li>Horizontal alignment</li> </ul> </li> <li>Turning on/off the header row visibility</li> <li>Table header and table cells<ul> <li>Font color</li> <li>Font size</li> <li>Font family</li> <li>Fill/background color</li> <li>Horizontal alignment of individual/multiple columns</li> <li>Row height</li> <li>Line width</li> </ul> </li> <li>Possibility to alternate row colors for better readability</li> <li>Width of individual/multiple columns</li> <li>Figure size</li> </ul> <p>All the following examples will use <code>df</code>.</p>"},{"location":"formatting/#title","title":"Title\u00b6","text":"<p>Setting the title will be controlled via the <code>title</code> input argument. <code>title</code> takes a <code>dict</code>. Some of the more important keys you can use are</p> <ul> <li><code>text</code></li> <li><code>font_color</code></li> <li><code>font_size</code></li> <li><code>font_family</code></li> <li><code>x</code></li> <li><code>xanchor</code></li> </ul> <p>You can find all the relevant key/value pairs here: https://plotly.com/python/reference/layout/#layout-title.</p> <p>Let's insert a title and specify <code>font_family</code> and <code>font_size</code>. We can control the alignment via the <code>x</code> key/value pair. It sets the x (horizontal) position in normalized coordinates from \"0\" (left) to \"1\" (right).</p>"},{"location":"formatting/#header-row-visibility","title":"Header row visibility\u00b6","text":"<p>You can turn on/off the header row via the <code>tbl_header_visible</code> input argument. It is set to <code>True</code> by default.</p>"},{"location":"formatting/#table-header","title":"Table header\u00b6","text":"<p>You can control the settings for the header row via the <code>tbl_header</code> input argument. This accepts a regular <code>dict</code>. This <code>dict</code> can comprise various key/value pairs that are also accepted by <code>plotly</code>. All available key/value pairs can be seen at <code>plotly</code>'s website at https://plotly.com/python/reference/table/#table-header.</p> <p>Let's set the header row in a different color and size. Also, let's set the alignment to \"left\".</p>"},{"location":"formatting/#table-cells","title":"Table cells\u00b6","text":"<p>Controlling the table body (cells) is basically the same. Just use the <code>tbl_cells</code> input argument, which happens to be a <code>dict</code>, too. See https://plotly.com/python/reference/table/#table-cells for all the possible key/value pairs.</p> <p>Let's print the table cell values in yellow on a green background and align them \"right\".</p>"},{"location":"formatting/#alternate-row-colors","title":"Alternate row colors\u00b6","text":"<p>Sometimes it might make sense to alternate row colors. That increases readability. Just provide a <code>tuple</code> of color values to the <code>row_fill_color</code> input argument. Using HEX colors is also possible.</p>"},{"location":"formatting/#controlling-column-width","title":"Controlling column width\u00b6","text":"<p>You can also control relative column width via the <code>col_width</code> argument. Columns fill the available width in proportion of their specified column widths. For example, let's set the first column's width triple the width of the third column and the second column's width double the width of the third column.</p>"},{"location":"formatting/#sizing-the-whole-figure","title":"Sizing the whole figure\u00b6","text":"<p>The <code>fig_size</code> keyword argument takes a <code>tuple</code> of integer values. They specify the width and height of the overall figure. If you set the numbers too low, it might happen that part of the image will get cropped (as in the first example). If you set the numbers too large, you might end up with too much white space around the image.</p>"},{"location":"formatting/#making-use-of-plotlys-formatting-functionality","title":"Making use of <code>plotly</code>'s formatting functionality\u00b6","text":"<p><code>plotly</code> accepts a large number of layout-related keyword arguments for its graph objects. You can find a detailed descriptions at https://plotly.com/python-api-reference/generated/plotly.graph_objects.Layout.html. You can make use of those settings via the <code>**layout_kwargs</code> input argument of the <code>plot_dataframe</code> function. It allows you to pass through various keyword arguments to <code>plotly</code>'s layout function.</p> <p>For example, let's say you want to change the background color of your plot. <code>plotly</code> accepts a keyword argument called <code>paper_bgcolor</code>, which you can simply pass through.</p>"},{"location":"getting_started/","title":"Getting started","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\n\nimport df2img\n\n\ndf = pd.DataFrame(\n    data=dict(\n        float_col=[1.4, float(\"NaN\"), 250, 24.65],\n        str_col=(\"string1\", \"string2\", float(\"NaN\"), \"string4\"),\n    ),\n    index=[\"row1\", \"row2\", \"row3\", \"row4\"],\n)\n\ndf\n</pre> import pandas as pd  import df2img   df = pd.DataFrame(     data=dict(         float_col=[1.4, float(\"NaN\"), 250, 24.65],         str_col=(\"string1\", \"string2\", float(\"NaN\"), \"string4\"),     ),     index=[\"row1\", \"row2\", \"row3\", \"row4\"], )  df Out[1]: float_col str_col row1 1.40 string1 row2 NaN string2 row3 250.00 NaN row4 24.65 string4 <p>Saving <code>df</code> into a png-file now takes just two lines of code, including some styling out of the box.</p> <p>First, we create a <code>plotly</code> figure.</p> In\u00a0[2]: Copied! <pre>fig = df2img.plot_dataframe(df, fig_size=(600, 140))\n</pre> fig = df2img.plot_dataframe(df, fig_size=(600, 140)) <p>Second, we save the figure to disk.</p> In\u00a0[3]: Copied! <pre>df2img.save_dataframe(fig=fig, filename=\"./img/getting_started.png\")\n</pre> df2img.save_dataframe(fig=fig, filename=\"./img/getting_started.png\")"},{"location":"getting_started/#getting-started","title":"Getting started\u00b6","text":"<p>Using df2img, it's pretty straightforward to save a <code>pd.DataFrame</code> into an image file. Let's first create a <code>pd.DataFrame</code> for illustrative purposes.</p>"},{"location":"installation/","title":"Installation","text":"<p>df2img is available at pypi.org.</p> <p>You can install the package via <code>pip</code>.</p> <pre><code>pip install df2img\n</code></pre> <p>You can also use <code>pdm</code> or <code>poetry</code>.</p> <pre><code>pdm add df2img\n</code></pre> <pre><code>poetry add df2img\n</code></pre>"}]}